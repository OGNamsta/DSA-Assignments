syntax = "proto3";
import "google/protobuf/wrappers.proto";


/*create_courses, where an administrator creates several courses, defines the number of assignments for each course and sets the weight for each assignment. This operation returns the code for each created course. It is bidirectional streaming;
* assign_courses, where an administrator assigns each created course to an assessor;
* create_users, where several users, each with a specific profile, are created. The users are streamed to the server, and the response is returned once the operation completes;
* submit_assignments, where a learner submits one or several assignments for one or multiple courses he/she registered for. The assignments are streamed to the server, and the response is received once the operation completes;
* request_assignments, where an assessor requests submitted assignments for a course he/she has been allocated. Note that an assignment can be marked only once. The function should stream back all assignments that have not been marked yet;
* submit_marks, where an assessor submits the marks for assignments;
* register, where a learner registers for one or several courses. All the courses are streamed to the server, and the result is returned once the operation completes;
*/

service courseService {
    rpc create_courses(stream Course) returns (stream google.protobuf.StringValue);
    rpc assign_courses(stream CourseAssessor) returns (google.protobuf.StringValue);
    rpc create_users(stream User) returns (google.protobuf.StringValue);
    rpc submit_assignments(stream SubmitedAssignment) returns (google.protobuf.StringValue);
    rpc request_assignments(google.protobuf.StringValue) returns (stream Assignment);
    rpc submit_marks(stream Mark) returns (google.protobuf.StringValue);
    rpc register(stream google.protobuf.StringValue) returns (stream google.protobuf.StringValue);    
}

message Assignment {
    string assignmentCode = 1;
    float weight = 2;
}

message User {
    string userId = 1;
    string firstName = 2;
    string lastName = 3;
    string email = 4;
    string profile = 5;
}

message SubmitedAssignment {
    Course course = 1;
    repeated string userId = 2;
    string content = 3;
    bool marked = 4;
}

message Mark {
    repeated string userId = 1;
    Course course = 2;
    int32 mark = 3;
}

message Course {
    string courseCode = 1;
    int32 number_of_assignments = 2;//Might have to comment out
    repeated Assignment assignments = 3;
}

message CourseAssessor {
    string courseCode = 1;
    string assessor = 2;
}

enum Profile {
    ADMINISTRATOR = 0;
    ASSESSOR = 1;
    LEARNER = 2;
}