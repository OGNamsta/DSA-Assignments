syntax = "proto3";
import "google/protobuf/empty.proto";


/*create_courses, where an administrator creates several courses, defines the number of assignments for each course and sets the weight for each assignment. This operation returns the code for each created course. It is bidirectional streaming;
* assign_courses, where an administrator assigns each created course to an assessor;
* create_users, where several users, each with a specific profile, are created. The users are streamed to the server, and the response is returned once the operation completes;
* submit_assignments, where a learner submits one or several assignments for one or multiple courses he/she registered for. The assignments are streamed to the server, and the response is received once the operation completes;
* request_assignments, where an assessor requests submitted assignments for a course he/she has been allocated. Note that an assignment can be marked only once. The function should stream back all assignments that have not been marked yet;
* submit_marks, where an assessor submits the marks for assignments;
* register, where a learner registers for one or several courses. All the courses are streamed to the server, and the result is returned once the operation completes;
*/

service courseService {
    rpc create_courses(stream Course) returns (stream CourseCode);
    rpc assign_courses(stream CourseAssessor) returns (google.protobuf.Empty);
    rpc create_users(stream User) returns (google.protobuf.Empty);
    rpc submit_assignments(stream Assignment) returns (google.protobuf.Empty);
    rpc request_assignments(CourseCode) returns (stream Assignment);
    rpc submit_marks(stream Mark) returns (google.protobuf.Empty);
    rpc register(stream CourseCode) returns (google.protobuf.Empty);    
}

message Course {
    string name = 1;
    int32 assignments = 2;
    repeated AssignmentWeight assignment_weights = 3;
}

message CourseCode {
    string code = 1;
}

message CourseAssessor {
    string code = 1;
    string assessor = 2;
}

message User {
    string username = 1;
    string password = 2;
    Profile profile = 3;
}

enum Profile {
    ADMINISTRATOR = 0;
    ASSESSOR = 1;
    LEARNER = 2;
}

message Assignment {
    string course_code = 1;
    string username = 2;
    string content = 3;
}

message AssignmentWeight {
    string name = 1;
    int32 weight = 2;
}

message Mark {
    string course_code = 1;
    string username = 2;
    int32 mark = 3;
}
